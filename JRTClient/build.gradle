buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

plugins {
    id 'java'
    id 'application'
//    id "de.inetsoftware.appbundler" version "4.8.5"
}

apply plugin: 'com.google.osdetector'

group 'com.resset'
version '1.0-SNAPSHOT'

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

repositories {
    mavenCentral()
    jcenter()
}
// TODO add multiplatform build for release options
dependencies {
    compile 'io.netty:netty-all:4.1.31.Final'
    compile 'org.jetbrains.pty4j:purejavacomm:0.0.11.1'
    compile 'org.jetbrains.pty4j:pty4j:0.8.5'
    compile "org.openjfx:javafx-base:11.0.1:$platform"
    compile "org.openjfx:javafx-graphics:11.0.1:$platform"
    compile "org.openjfx:javafx-controls:11.0.1:$platform"
    compile "org.openjfx:javafx-fxml:11.0.1:$platform"
    compile "org.openjfx:javafx-media:11.0.1:$platform"
    compile "org.openjfx:javafx-web:11.0.1:$platform"
}

mainClassName = 'app.Main'

//setupBuilder {
//    vendor = 'i-net software'
//    application = "SetupBuilder Plugin"
//    appIdentifier = "SetupBuilder"
//    version = '1.0'
//    licenseFile = 'license.txt'
//    // icons in different sizes for different usage. you can also use a single *.ico or *.icns file
//    icons = ['icon16.png', 'icon32.png', 'icon48.png', 'icon128.png']
//    // all files for all platforms
//    from( 'source' ) {
//        include 'files/*.jar'
//    }
//    bundleJre = 1.8
//}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.web,javafx.fxml,javafx.controls',

        ]
    }
}

//run {
//    doFirst {
//        jvmArgs = [
//                '--module-path', classpath.asPath,
//                '--add-modules', 'javafx.web,javafx.fxml,javafx.controls',
//        ]
//    }
//}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'app.Main'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}